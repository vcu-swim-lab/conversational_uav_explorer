# -*- coding: utf-8 -*-
"""ChatGPT4UAVs.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ctjMzbOjuQpgQEZuHYxIrYfWvPvjsBN4

# Setup ChatGPT
"""

!pip install langchain
!pip install openai

import os
from langchain.llms import OpenAI

os.environ["OPENAI_API_KEY"] = "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"

"""## Test invocation of ChatGPT via API"""

llm = OpenAI(temperature=0.9)
text = "What would be a good company name for a company that makes colorful socks?"
print(llm(text))

"""# Command Breakdown (Without Whisper)

(You can ignore this part it's just so I remember the goal)

Goal is to get prompt chat, get a voice command from "Whisper" as input, which will then be converted to text, pass that text into the prompt template, then have the UAV carry out the task.

**The following is just experimentation without "Whisper"**

________________________________________

This is where the command will be broken up into the important pieces, and then stored in a chain to be passed to the UAV.
"""

from langchain.prompts import PromptTemplate
from langchain.chains import LLMChain
from langchain.chains import SequentialChain

# Method to create a chain with the information needed for the command

# Action Prompt
prompt_command = """You are going to get a sentence command, you need to find
the action of the sentence. The action will be, Take Picture, Monitor or
Explore. You need to find the subject and the location of the sentence
subject. If you can't find an action or location, answer with "none". If the
action is Take Picture, you need to also find the photo type and the amount
of photos needed to be taken. If there is no photo amount answer "1" but ONLY
if the action is Take Picture, otherwise answer "none". If there is no photo
type answer "none".

Sentence: {sentence}

Action:

Location:

Photo Type:

Photo Amount
"""

command = PromptTemplate(
    input_variables = ["sentence"],
    template = prompt_command
)

# Action Chain Creation
command_chain = LLMChain(llm = llm,
                        prompt = command,
                        output_key = "breakdown")

"""Testing the command chain to make sure it works."""

# Get Command Test 1
holder = command_chain.run("Explore the outside of the green house on Baker St")

print(holder)

"""Testing command chain with Take Picture action."""

# Get Command Test 2
holder2 = command_chain.run(
    "Take 3 wide angle pictures of the yellow house on the corner of Main Street.")

print(holder2)

"""Testing command chain using Take Picture but not giving a picture type or photo amount."""

# Get Command Test 3
holder3 = command_chain.run(
    "Take picture of the yellow house on the corner of Main Street.")

print(holder3)

"""Obiviously in the future it will be "Whisper" taking in the voice commands and translating to text. Right now this is just a baseline to figure out how to format everything.

This part simply brokedown the command into the necessary parts, the next part is where the command gets passed to the autal prompt the UAV will get.

___________________________________________

# UAV Prompt Creation **(WITHOUT the extra Whisper Chain)**

Creating the method that will give the UAV it's instructional prompt.
"""

# Creating the prompt that will actually be given to the UAV
info = """You are in control of an Unmanned Aerial Vehicle or UAV. You are
going to be given a command, and based off of that command and the following
instructions you will carry out specific actions. If you do not understand the
command, or the command can't be carried out do not cease the action you are
currently doing.

Context: The commands you are looking for and are expected to react to are,
Take Picture, Monitor and Explore. Based on the information above, you will be
given an action, location, photo type and photo amount, in that exact order.
But the photo type and amount are only relevent if the command is "Take
Picture", otherwise ignore those two parts. If you are told to Take Picture,
look for the specific type of picture being sought, where to take the picture,
and how many pictures to take. If none is found for any of the areas just take
it on whatever setting you're on, and of whatever is currently in view. If you
are told to Monitor, look for what is being monitored and keep it in view. If
you are told to Explore, look for what you are supposed to explore and put
different parts of the targeted location in view. If that information isn't
availble, use the previous commands information. If there is still no
information, Explore or Monitor whatever is in view.

Command: {breakdown}
"""

# For now there are no input variables since I don't necessarily require a
# written output rather than an action output.
prompt = PromptTemplate(
    input_variables = ["breakdown"],
    template = info
)

prompt_chain = LLMChain(llm = llm,
                        prompt = prompt,
                        output_key = "instructions")

"""Creating Sequential Chain that passes the instructions needed to carry out the actions deemed necessary for the UAV"""

command_breakdown_chain = SequentialChain(chains = [command_chain,prompt_chain],
                                                input_variables = ["sentence"],
                                                output_variables = ["instructions"],
                                                verbose = True)

test = command_breakdown_chain({"sentence":"Take 3 wide angle pictures of the yellow house on the corner of Main Street."})

print(test)

"""#Command Breakdown **(WITH Whisper)**

The following algorithm will be a second implementation of the Command Breakdown, but with Whisper translating the command to text, versus a pure text input.
"""

# Installing Library
!pip install -U openai-whisper

"""This is where the model of Whisper used is selected. I chose the base model because my cross examination of others experiences with each model determined that the base model was the best for our needs (speed and accuracy were the focuses of the search)."""

# Importing Whisper and picking the model.
import whisper
model = whisper.load_model("base")

"""Whisper can translate audio files, so as of right now I am reading about how to contanstly put in new audio files as each command changes, so the UAV will work as intended. The following is a hypothetical implementation until I can figure the aformentioned piece out."""

# This is where the path is put down to the audio file, so it can be transcribed.

result = model.transcribe("pretend/this/is/a/path/for/now")
transcription = result["text"]

"""Creating a Prompt and Chain with the transcription so it can be passed to the offical Command Prompt via Simple Sequential chain"""

# Transcription Prompt
transcribe_prompt = """You are to pass the aubio transcription to the next
chain. Do not alter the transciption in any way.

Transcription: {text}
"""

# Creating transcription chain
sentence_chain = LLMChain(llm = llm,
                       prompt =  transcribe_prompt,
                        output_key = "sentence")

"""Hypothetical chain testing."""

# Transcription Test
holder4 = sentence_chain.run(transcription)
# Note the transcription variable was made two cells above.

print(holder4)

"""Passing the transcription to the Command Prompt Template."""

# Method to create a chain with the information needed for the command using
# transcription from Whisper.

# Action Prompt
prompt_command2 = """You are going to get a sentence command, you need to find
the action of the sentence. The action will be, Take Picture, Monitor or
Explore. You need to find the subject and the location of the sentence
subject. If you can't find an action or location, answer with "none". If the
action is Take Picture, you need to also find the photo type and the amount
of photos needed to be taken. If there is no photo amount answer "1" but ONLY
if the action is Take Picture, otherwise answer "none". If there is no photo
type answer "none".

Sentence: {sentence}

Action:

Location:

Photo Type:

Photo Amount
"""

command2 = PromptTemplate(
    input_variables = ["sentence"],
    template = prompt_command
)

# Action Chain Creation
command_chain2 = LLMChain(llm = llm,
                        prompt = command2,
                        output_key = "breakdown2")

"""Necessary import for the Simple Sequential Chain."""

from langchain.chains import SimpleSequentialChain

"""Connecting the two created chains via the SimpleSequentialChain."""

# Linking the two chains
sentence_command_chain = SimpleSequentialChain(
    chains=[sentence_chain, command_chain2], verbose = True
)

"""Testing to make sure the output of the sentence chain was used as the input for the second implementation of the command chain."""

# Connection Test

holder5 = sentence_command_chain.run(transcription)
print(holder5)

"""For now this is how I am planning to implement the program using Whisper, I just need to figure out how to make sure new audio files are constantly being fed to the program.

# UAV Prompt Creation **(WITH the extra Whisper Chain)**

Implementation will be here shortly.
"""